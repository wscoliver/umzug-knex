{"version":3,"sources":["../../../src/spec/migrations/001_tag.js"],"names":["describe","migrationDir","join","__dirname","umzug","knex","before","done","connect","storage","migrations","params","path","pattern","execute","method","then","migrated","catch","err","console","warn","it","schema","hasTable","exists","to","equal","columnInfo","info","id","not","type","nullable","name","result","Promise","resolve","reject","res"],"mappings":";;8QAAA;;;;;AAKA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,SAAS,uBAAT,EAAkC,YAAY;AAC5C,MAAIC,eAAe,eAAKC,IAAL,CAAUC,SAAV,EAAoB,mBAApB,CAAnB;AACA,MAAIC,QAAQ,EAAZ;AACA,MAAIC,OAAO,EAAX;AACAC,SAAO,UAAUC,IAAV,EAAgB;AACrBF,WAAO,aAAGG,OAAH,EAAP;AACAJ,YAAQ,oBAAU;AAChBK,eAAS,MADO;AAEhBC,kBAAY;AACVC,gBAAQ,CAAEN,IAAF,CADE;AAEVO,cAAMX,YAFI;AAGVY,iBAAS;AAHC;AAFI,KAAV,CAAR;AAQAT,UAAMU,OAAN,CAAc;AACZC,cAAQ,IADI;AAEZL,kBAAY,CACV,SADU;AAFA,KAAd,EAKGM,IALH,CAKQ,UAASC,QAAT,EAAmB;AACzBV;AACD,KAPD,EAOGW,KAPH,CAOS,UAASC,GAAT,EAAc;AACrBC,cAAQC,IAAR,CAAaF,GAAb;AACD,KATD;AAUD,GApBD;AAqBAG,KAAG,+BAAH,EAAoC,UAASf,IAAT,EAAe;AACjDF,SAAKkB,MAAL,CAAYC,QAAZ,CAAqB,MAArB,EAA6BR,IAA7B,CAAkC,UAASS,MAAT,EAAiB;AACjD,wBAAOA,MAAP,EAAeC,EAAf,CAAkBC,KAAlB,CAAwB,IAAxB;AACApB;AACD,KAHD;AAID,GALD;AAMAe,KAAG,2CAAH,EAAgD,UAASf,IAAT,EAAe;AAC7DF,SAAK,MAAL,EAAauB,UAAb,GAA0BZ,IAA1B,CAA+B,UAASa,IAAT,EAAe;AAC5C,gCAAcA,KAAKC,EAAnB,GAAwBJ,EAAxB,CAA2BK,GAA3B,CAA+BJ,KAA/B,CAAqC,WAArC;AACA,wBAAOE,KAAKC,EAAL,CAAQE,IAAf,EAAqBN,EAArB,CAAwBC,KAAxB,CAA8B,KAA9B;AACA,wBAAOE,KAAKC,EAAL,CAAQG,QAAf,EAAyBP,EAAzB,CAA4BC,KAA5B,CAAkC,KAAlC;AACA,gCAAcE,KAAKK,IAAnB,GAA0BR,EAA1B,CAA6BK,GAA7B,CAAiCJ,KAAjC,CAAuC,WAAvC;AACA,wBAAOE,KAAKK,IAAL,CAAUF,IAAjB,EAAuBN,EAAvB,CAA0BC,KAA1B,CAAgC,SAAhC;AACA,wBAAOE,KAAKK,IAAL,CAAUD,QAAjB,EAA2BP,EAA3B,CAA8BC,KAA9B,CAAoC,KAApC;AACApB;AACD,KARD;AASD,GAVD;AAWAe,KAAG,4BAAH,EAAiC,UAASf,IAAT,EAAe;AAC9CH,UAAMU,OAAN,CAAc;AACZC,cAAQ,MADI;AAEZL,kBAAY,CACV,SADU;AAFA,KAAd,EAKGM,IALH,CAKQ,UAACmB,MAAD,EAAY;AAClB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCjC,aAAKkB,MAAL,CAAYC,QAAZ,CAAqB,MAArB,EAA6BR,IAA7B,CAAkCqB,OAAlC,EAA2CnB,KAA3C,CAAiDoB,MAAjD;AACD,OAFM,CAAP;AAGD,KATD,EASGtB,IATH,CASQ,UAACuB,GAAD,EAAS;AACf,wBAAOA,GAAP,EAAYb,EAAZ,CAAeC,KAAf,CAAqB,KAArB;AACApB;AACD,KAZD;AAaD,GAdD;AAeD,CAzDD","file":"001_tag.js","sourcesContent":["/*\n  @name 001_tag.js\n  @description Migration test for tag.\n*/\n\nimport { expect } from 'chai'\nimport Umzug from 'umzug'\nimport db from '../../db'\nimport fs from 'fs'\nimport path from 'path'\n\ndescribe('Migration: 001_tag.js', function () {\n  let migrationDir = path.join(__dirname,'/../../migrations')\n  let umzug = {}\n  let knex = {}\n  before(function (done) {\n    knex = db.connect()\n    umzug = new Umzug({\n      storage: 'json',\n      migrations: {\n        params: [ knex ],\n        path: migrationDir,\n        pattern: /[^=&#]+.js$/\n      }\n    })\n    umzug.execute({\n      method: 'up',\n      migrations: [\n        '001_tag'\n      ]\n    }).then(function(migrated) {\n      done()\n    }).catch(function(err) {\n      console.warn(err)\n    })\n  })\n  it('should migrate the tags table', function(done) {\n    knex.schema.hasTable('tags').then(function(exists) {\n      expect(exists).to.equal(true)\n      done()\n    })\n  })\n  it('should have an ID field and a name field.', function(done) {\n    knex('tags').columnInfo().then(function(info) {\n      expect(typeof(info.id)).to.not.equal('undefined')\n      expect(info.id.type).to.equal('int') \n      expect(info.id.nullable).to.equal(false) \n      expect(typeof(info.name)).to.not.equal('undefined')\n      expect(info.name.type).to.equal('varchar') \n      expect(info.name.nullable).to.equal(false) \n      done()\n    })\n  })\n  it('should drop the tags table', function(done) {\n    umzug.execute({\n      method: 'down',\n      migrations: [\n        '001_tag'\n      ]\n    }).then((result) => {\n      return new Promise((resolve, reject) => {\n        knex.schema.hasTable('tags').then(resolve).catch(reject)\n      })\n    }).then((res) => {\n      expect(res).to.equal(false)\n      done()\n    })\n  })\n})\n"]}